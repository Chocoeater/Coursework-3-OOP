from src.dbmanager import DBManager
from src.dbsaver import DBSaver
from src.head_hunter_api import HeadHunterAPI
from src.vacancies import Vacancy


def print_vacancies(vacancies):
    for vac in vacancies:
        print('-' * 50)
        print(f"–ö–æ–º–ø–∞–Ω–∏—è: {vac[0]}")
        print(f"–í–∞–∫–∞–Ω—Å–∏—è: {vac[1]}")
        print(f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {vac[2]}")
        print(f"–°—Å—ã–ª–∫–∞: {vac[3]}")
    print('-' * 50)


def user_interface():
    print('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –≤–∞–∫–∞–Ω—Å–∏–π HeadHunter!')

    keyword = input('–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π (–ù–∞–ø—Ä–∏–º–µ—Ä, –°–±–µ—Ä–±–∞–Ω–∫ –∏–ª–∏ –Ø–Ω–¥–µ–∫—Å): ')

    print(f'–ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É "{keyword}". . .')

    hh_api = HeadHunterAPI()
    employers = hh_api.get_employers(keyword, pages=1)
    print(f'–ù–∞–π–¥–µ–Ω–æ {len(employers)} —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π.')

    print('–ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏. . .')
    vac = hh_api.get_vacancies()
    vacancies = dict()
    for key, value in vac.items():
        new_data = Vacancy.cast_to_object_list(value)
        vacancies[key] = new_data

    print('–§–æ—Ä–º–∏—Ä—É–µ–º –∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. . .')
    db_saver = DBSaver()
    db_saver.create_database()
    db_saver.save_to_database(employers, vacancies)
    print('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞!\n')

    db = DBManager()

    while True:
        print("\n –ú–µ–Ω—é:")
        print("1 ‚Äî –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π")
        print("2 ‚Äî –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞–∫–∞–Ω—Å–∏–π (–Ω–∞–∑–≤–∞–Ω–∏–µ, –∑–ø, —Å—Å—ã–ª–∫–∞)")
        print("3 ‚Äî –°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞")
        print("4 ‚Äî –í–∞–∫–∞–Ω—Å–∏–∏ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π")
        print("5 ‚Äî –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏")
        print("0 ‚Äî –í—ã—Ö–æ–¥")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ")

        if choice == "1":
            data = db.get_companies_and_vacancies_count()
            print("\n–ö–æ–º–ø–∞–Ω–∏–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–∫–∞–Ω—Å–∏–π:")
            for row in data:
                print(f"{row[0]} ‚Äî {row[1]} –≤–∞–∫–∞–Ω—Å–∏–π")

        elif choice == "2":
            vacancies = db.get_all_vacancies()
            print("\n–í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏:")
            print_vacancies(vacancies)

        elif choice == "3":
            avg = db.get_avg_salary()
            print(f"\n–°—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {int(avg)} —Ä—É–±.")

        elif choice == "4":
            avg_salary = db.get_avg_salary()
            vacancies = db.get_vacancies_with_higher_salary(avg_salary)
            print("\n–í–∞–∫–∞–Ω—Å–∏–∏ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤—ã—à–µ —Å—Ä–µ–¥–Ω–µ–π:")
            print_vacancies(vacancies)

        elif choice == "5":
            keyword = input("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: ").strip()
            vacancies = db.get_vacancies_with_keyword(keyword)
            print(f"\n–í–∞–∫–∞–Ω—Å–∏–∏ —Å –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–æ–º '{keyword}':")
            print_vacancies(vacancies)

        elif choice == "0":
            print("üëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
            break

        else:
            print("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
